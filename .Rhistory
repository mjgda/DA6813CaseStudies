library(rpart.plot)
library(MASS)
library(fastDummies)
setwd("~/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/GitHub")
set.seed(12345)
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale and remove variables with near-zero variance(which turns out to be pdays)
params<-preProcess(bank,method=c("scale","center","nzv"))
scaledbank<-predict(params,bank)
#separate the data into train and test sets
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
#balance the target classes so the
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankrf <- train(Class~poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "rf",
metric="ROC",
trControl = TC)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart.plot)
library(MASS)
library(fastDummies)
setwd("~/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/GitHub")
set.seed(12345)
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale and remove variables with near-zero variance(which turns out to be pdays)
params<-preProcess(bank,method=c("scale","center","nzv"))
scaledbank<-predict(params,bank)
#separate the data into train and test sets
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
#balance the target classes so the
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#bankrf <- train(Class~poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
#                 method = "rf",
#                 metric="ROC",
3                 trControl = TC)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#bankrf <- train(Class~poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
#                 method = "rf",
#                 metric="ROC",
#                 trControl = TC)
#predrf<-predict(bankrf,banktest)
banktree=train(Class~.,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.01, split=c("gini"),minbucket = 5))
predtree<-predict(banktree,banktest)
bankLOG <- train(Class~previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "glmnet",
metric="ROC",
trControl = TC)
predlog<-predict(bankLOG,banktest)
#bankLOGfull <- train(Class~., data=banktrain,
#                 method = "glmnet",
#                 metric="ROC",
#                 trControl = TC)
#predlogfull<-predict(bankLOGfull,banktest)
#TC <- trainControl(method="repeatedcv", number=10,repeats=3,
#                   classProbs=TRUE,summaryFunction = twoClassSummary)
#bankrad <- train(Class~poutcome+job+nr.employed+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate, #data=banktrain,
#                 method = "svmLinear",
#                 metric="ROC",
#                 trControl = TC,
#                 tuneGrid = expand.grid(C = seq(0.01, 2, length = 10)))
#predrad<-predict(bankrad,banktest)
predrad<-predlog
predrf<-predtree
table(bank$pdays)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
idx <- order(coef(summary(stepped))[,4])
out <- coef(summary(stepped))[idx,]
head(out,15)
imp <- as.data.frame(varImp(fullmodel))
imp <- data.frame(Importance = imp$Overall,
Variable_Name   = rownames(imp))
head(imp[order(imp$Importance,decreasing = T),],10)
predictions<-list(predlog,predlogfull,predrf,predtree,predrad)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart.plot)
library(MASS)
library(fastDummies)
setwd("~/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/GitHub")
set.seed(12345)
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale and remove variables with near-zero variance(which turns out to be pdays)
params<-preProcess(bank,method=c("scale","center","nzv"))
scaledbank<-predict(params,bank)
#separate the data into train and test sets
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
#balance the target classes so the
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#bankrf <- train(Class~poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
#                 method = "rf",
#                 metric="ROC",
#                 trControl = TC)
#predrf<-predict(bankrf,banktest)
banktree=train(Class~.,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.01, split=c("gini"),minbucket = 5))
predtree<-predict(banktree,banktest)
bankLOG <- train(Class~previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "glmnet",
metric="ROC",
trControl = TC)
predlog<-predict(bankLOG,banktest)
#bankLOGfull <- train(Class~., data=banktrain,
#                 method = "glmnet",
#                 metric="ROC",
#                 trControl = TC)
#predlogfull<-predict(bankLOGfull,banktest)
#TC <- trainControl(method="repeatedcv", number=10,repeats=3,
#                   classProbs=TRUE,summaryFunction = twoClassSummary)
#bankrad <- train(Class~poutcome+job+nr.employed+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate, #data=banktrain,
#                 method = "svmLinear",
#                 metric="ROC",
#                 trControl = TC,
#                 tuneGrid = expand.grid(C = seq(0.01, 2, length = 10)))
#predrad<-predict(bankrad,banktest)
predrad<-predlog
predrf<-predtree
predlogfull<-predlog
table(bank$pdays)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
idx <- order(coef(summary(stepped))[,4])
out <- coef(summary(stepped))[idx,]
head(out,15)
imp <- as.data.frame(varImp(fullmodel))
imp <- data.frame(Importance = imp$Overall,
Variable_Name   = rownames(imp))
head(imp[order(imp$Importance,decreasing = T),],10)
par(mfrow=c(3,1))
plot(banktrain$month,banktrain$Class,xlab="Month")
plot(banktrain$job,banktrain$Class,xlab="Job")
plot(banktrain$poutcome,banktrain$Class,xlab="Outcome")
par(mfrow=c(2,4))
plot(bank$y,bank$contact,ylab="Contact")
plot(bank$y,bank$age,ylab="Age")
plot(bank$y,bank$marital,ylab="Marital Status")
plot(bank$y,bank$campaign,ylab="Campaign")
plot(bank$y,bank$cons.price.idx,ylab="Price Index")
plot(bank$y,bank$cons.conf.idx,ylab="Consumer Confidence")
plot(bank$y,bank$nr.employed,ylab="Number of Employees")
plot(bank$y,bank$emp.var.rate,ylab="Employment Variation Rate")
predictions<-list(predlog,predlogfull,predrf,predtree,predrad)
labelcf<-c("Selected Logistic Regression","Full Model Logistic Regression","Random Forest","Decision Tree","Linear SVM")
for(i in 1:5){
print(labelcf[i])
print(confusionMatrix(unlist(predictions[i]),banktest$y)$table)
print(confusionMatrix(unlist(predictions[i]),banktest$y)$byClass[c(3,11)])
}
lf<-confusionMatrix(predlogfull,banktest$y)$byClass[3]
rf<-confusionMatrix(predrf,banktest$y)$byClass[3]
svml<-confusionMatrix(predrad,banktest$y)$byClass[3]
dt<-confusionMatrix(predtree,banktest$y)$byClass[3]
plot(x=1,y=1,ylab="Cost-To-Revenue Ratio",xlab="Call Success Rate",xlim=c(0.035,1),ylim=c(0.035,1))
abline(0,1,lwd = 2, lty = 3)
lines(c(lf,lf),c(lf,0),lwd = 2,col="darkgreen")
lines(c(rf,rf),c(rf,0),lwd = 2,col="blue")
lines(c(svml,svml),c(svml,0),lwd = 2,col="red")
lines(c(dt,dt),c(dt,0),lwd = 2,col="green")
legend("bottomright",legend=c("Logistic Regression","Random Forest","Linear SVM","Decision Tree","Break-even Profitability"),lty=c(1,1,1,1,3),lwd = 2,col = c("darkgreen", "blue","red","green","black"))
rpart.plot(banktree$finalModel)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart.plot)
library(MASS)
library(fastDummies)
setwd("~/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/GitHub")
set.seed(12345)
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale and remove variables with near-zero variance(which turns out to be pdays)
params<-preProcess(bank,method=c("scale","center","nzv"))
scaledbank<-predict(params,bank)
#separate the data into train and test sets
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
#balance the target classes so the
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10,repeats=3,classProbs=TRUE,summaryFunction = twoClassSummary)
bankrf <- train(Class~poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "rf",
metric="ROC",
trControl = TC)
predrf<-predict(bankrf,banktest)
banktree=train(Class~.,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.01, split=c("gini"),minbucket = 5))
predtree<-predict(banktree,banktest)
bankLOG <- train(Class~previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "glmnet",
metric="ROC",
trControl = TC)
predlog<-predict(bankLOG,banktest)
bankLOGfull <- train(Class~., data=banktrain,
method = "glmnet",
metric="ROC",
trControl = TC)
predlogfull<-predict(bankLOGfull,banktest)
TC <- trainControl(method="repeatedcv", number=10,repeats=3,
classProbs=TRUE,summaryFunction = twoClassSummary)
bankrad <- train(Class~poutcome+job+nr.employed+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate, data=banktrain,
method = "svmLinear",
metric="ROC",
trControl = TC,
tuneGrid = expand.grid(C = seq(0.01, 2, length = 10)))
predrad<-predict(bankrad,banktest)
#predrad<-predlog
#predrf<-predtree
#predlogfull<-predlog
table(bank$pdays)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
idx <- order(coef(summary(stepped))[,4])
out <- coef(summary(stepped))[idx,]
head(out,15)
imp <- as.data.frame(varImp(fullmodel))
imp <- data.frame(Importance = imp$Overall,
Variable_Name   = rownames(imp))
head(imp[order(imp$Importance,decreasing = T),],10)
par(mfrow=c(3,1))
plot(banktrain$month,banktrain$Class,xlab="Month")
plot(banktrain$job,banktrain$Class,xlab="Job")
plot(banktrain$poutcome,banktrain$Class,xlab="Outcome")
par(mfrow=c(2,4))
plot(bank$y,bank$contact,ylab="Contact")
plot(bank$y,bank$age,ylab="Age")
plot(bank$y,bank$marital,ylab="Marital Status")
plot(bank$y,bank$campaign,ylab="Campaign")
plot(bank$y,bank$cons.price.idx,ylab="Price Index")
plot(bank$y,bank$cons.conf.idx,ylab="Consumer Confidence")
plot(bank$y,bank$nr.employed,ylab="Number of Employees")
plot(bank$y,bank$emp.var.rate,ylab="Employment Variation Rate")
predictions<-list(predlog,predlogfull,predrf,predtree,predrad)
labelcf<-c("Selected Logistic Regression","Full Model Logistic Regression","Random Forest","Decision Tree","Linear SVM")
for(i in 1:5){
print(labelcf[i])
print(confusionMatrix(unlist(predictions[i]),banktest$y)$table)
print(confusionMatrix(unlist(predictions[i]),banktest$y)$byClass[c(3,11)])
}
lf<-confusionMatrix(predlogfull,banktest$y)$byClass[3]
rf<-confusionMatrix(predrf,banktest$y)$byClass[3]
svml<-confusionMatrix(predrad,banktest$y)$byClass[3]
dt<-confusionMatrix(predtree,banktest$y)$byClass[3]
plot(x=1,y=1,ylab="Cost-To-Revenue Ratio",xlab="Call Success Rate",xlim=c(0.035,1),ylim=c(0.035,1))
abline(0,1,lwd = 2, lty = 3)
lines(c(lf,lf),c(lf,0),lwd = 2,col="darkgreen")
lines(c(rf,rf),c(rf,0),lwd = 2,col="blue")
lines(c(svml,svml),c(svml,0),lwd = 2,col="red")
lines(c(dt,dt),c(dt,0),lwd = 2,col="green")
legend("bottomright",legend=c("Logistic Regression","Random Forest","Linear SVM","Decision Tree","Break-even Profitability"),lty=c(1,1,1,1,3),lwd = 2,col = c("darkgreen", "blue","red","green","black"))
rpart.plot(banktree$finalModel)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart.plot)
library(MASS)
library(fastDummies)
setwd("~/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/GitHub")
set.seed(12345)
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale and remove variables with near-zero variance(which turns out to be pdays)
params<-preProcess(bank,method=c("scale","center","nzv"))
scaledbank<-predict(params,bank)
#separate the data into train and test sets
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
#balance the target classes so the
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10,repeats=3,classProbs=TRUE,summaryFunction = twoClassSummary)
bankrfex <- train(Class~poutcome+job+loan+contact+campaign+month+education+day_of_week, data=banktrain,
method = "rf",
metric="ROC",
trControl = TC)
predrfex<-predict(bankrfex,banktest)
banktreeex=train(Class~poutcome+job+loan+contact+campaign+month+education+day_of_week,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.01, split=c("gini"),minbucket = 5))
predtreeex<-predict(banktreeex,banktest)
bankLOGex <- train(Class~poutcome+job+loan+contact+campaign+month+education+day_of_week, data=banktrain,
method = "glmnet",
metric="ROC",
trControl = TC)
predlogex<-predict(bankLOGex,banktest)
#bankLOGfull <- train(Class~., data=banktrain,
#                 method = "glmnet",
#                 metric="ROC",
#                 trControl = TC)
#predlogfull<-predict(bankLOGfull,banktest)
bankradex <- train(Class~poutcome+job+loan+contact+campaign+month+education+day_of_week, data=banktrain,
method = "svmLinear",
metric="ROC",
trControl = TC,
tuneGrid = expand.grid(C = seq(0.01, 2, length = 10)))
banktreeex=train(Class~poutcome+job+loan+contact+campaign+month+education+day_of_week,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.0001, split=c("gini"),minbucket = 5))
predtreeex<-predict(banktreeex,banktest)
rpart.plot(banktree$finalModel)
rpart.plot(banktreeex$finalModel)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
banktreeex=train(Class~poutcome+job+loan+contact+campaign+month+education+day_of_week,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.0001, maxsurrogate = 0, usesurrogate = 0,split=c("gini"),minbucket = 5))
predtreeex<-predict(banktreeex,banktest)
predictions<-list(predlogex,predlogfullex,predrfex,predtreeex,predradex)
rpart.plot(banktree$finalModel)
rpart.plot(banktreeex$finalModel)
lf<-confusionMatrix(predlogfullex,banktest$y)$byClass[3]
predictions<-list(predlogex,predlogfull,predrfex,predtreeex,predradex)
predictions<-list(predlogex,predlogfull,predrfex,predtreeex,predrad)
#predictions<-list(predlog,predlogfull,predrf,predtree,predrad)
labelcf<-c("Selected Logistic Regression","Full Model Logistic Regression","Random Forest","Decision Tree","Linear SVM")
for(i in 1:5){
print(labelcf[i])
print(confusionMatrix(unlist(predictions[i]),banktest$y)$table)
print(confusionMatrix(unlist(predictions[i]),banktest$y)$byClass[c(3,11)])
}
banktreeex=train(Class~.,data=banktrain, metric="Spec",trControl=TC,method='rpart',control = rpart.control(cp=0.0001, maxsurrogate = 0, usesurrogate = 0,split=c("gini"),minbucket = 5))
predtreeex<-predict(banktreeex,banktest)
rpart.plot(banktree$finalModel)
rpart.plot(banktreeex$finalModel)
table(bank$nr.employed)
table(bank$nr.employed,bank$y)
banktreeex=train(Class~poutcome+job+loan+contact+campaign+month+education+day_of_week,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.0001, maxsurrogate = 0, usesurrogate = 0,split=c("gini"),minbucket = 5))
predtreeex<-predict(banktreeex,banktest)
rpart.plot(banktree$finalModel)
rpart.plot(banktreeex$finalModel)
lf<-confusionMatrix(predlogex,banktest$y)$byClass[3]
rf<-confusionMatrix(predrfex,banktest$y)$byClass[3]
svml<-confusionMatrix(predrad,banktest$y)$byClass[3]
dt<-confusionMatrix(predtreeex,banktest$y)$byClass[3]
#lf<-confusionMatrix(predlogfull,banktest$y)$byClass[3]
#rf<-confusionMatrix(predrf,banktest$y)$byClass[3]
#svml<-confusionMatrix(predrad,banktest$y)$byClass[3]
#dt<-confusionMatrix(predtree,banktest$y)$byClass[3]
plot(x=1,y=1,ylab="Cost-To-Revenue Ratio",xlab="Call Success Rate",xlim=c(0.035,1),ylim=c(0.035,1))
abline(0,1,lwd = 2, lty = 3)
lines(c(lf,lf),c(lf,0),lwd = 2,col="darkgreen")
lines(c(rf,rf),c(rf,0),lwd = 2,col="blue")
lines(c(svml,svml),c(svml,0),lwd = 2,col="red")
lines(c(dt,dt),c(dt,0),lwd = 2,col="green")
legend("bottomright",legend=c("Logistic Regression","Random Forest","Linear SVM","Decision Tree","Break-even Profitability"),lty=c(1,1,1,1,3),lwd = 2,col = c("darkgreen", "blue","red","green","black"))
str(bank)
banktreeex=train(Class~age+job+marital+education+default+housing+loan+contact+month+day_of_week,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.0001, maxsurrogate = 0, usesurrogate = 0,split=c("gini"),minbucket = 5))
predtreeex<-predict(banktreeex,banktest)
lf<-confusionMatrix(predlogex,banktest$y)$byClass[3]
rf<-confusionMatrix(predrfex,banktest$y)$byClass[3]
svml<-confusionMatrix(predrad,banktest$y)$byClass[3]
dt<-confusionMatrix(predtreeex,banktest$y)$byClass[3]
#lf<-confusionMatrix(predlogfull,banktest$y)$byClass[3]
#rf<-confusionMatrix(predrf,banktest$y)$byClass[3]
#svml<-confusionMatrix(predrad,banktest$y)$byClass[3]
#dt<-confusionMatrix(predtree,banktest$y)$byClass[3]
plot(x=1,y=1,ylab="Cost-To-Revenue Ratio",xlab="Call Success Rate",xlim=c(0.035,1),ylim=c(0.035,1))
abline(0,1,lwd = 2, lty = 3)
lines(c(lf,lf),c(lf,0),lwd = 2,col="darkgreen")
lines(c(rf,rf),c(rf,0),lwd = 2,col="blue")
lines(c(svml,svml),c(svml,0),lwd = 2,col="red")
lines(c(dt,dt),c(dt,0),lwd = 2,col="green")
legend("bottomright",legend=c("Logistic Regression","Random Forest","Linear SVM","Decision Tree","Break-even Profitability"),lty=c(1,1,1,1,3),lwd = 2,col = c("darkgreen", "blue","red","green","black"))
predictions<-list(predlogex,predlogfull,predrfex,predtreeex,predrad)
#predictions<-list(predlog,predlogfull,predrf,predtree,predrad)
labelcf<-c("Selected Logistic Regression","Full Model Logistic Regression","Random Forest","Decision Tree","Linear SVM")
for(i in 1:5){
print(labelcf[i])
print(confusionMatrix(unlist(predictions[i]),banktest$y)$table)
print(confusionMatrix(unlist(predictions[i]),banktest$y)$byClass[c(3,11)])
}
rpart.plot(banktree$finalModel)
rpart.plot(banktreeex$finalModel)
banktreeex=train(Class~age+job+marital+education+default+housing+loan+day_of_week,data=banktrain, metric="Spec",trControl=TC,method='rpart',
control = rpart.control(cp=0.0001, maxsurrogate = 0, usesurrogate = 0,split=c("gini"),minbucket = 5))
predtreeex<-predict(banktreeex,banktest)
predictions<-list(predlogex,predlogfull,predrfex,predtreeex,predrad)
#predictions<-list(predlog,predlogfull,predrf,predtree,predrad)
labelcf<-c("Selected Logistic Regression","Full Model Logistic Regression","Random Forest","Decision Tree","Linear SVM")
for(i in 1:5){
print(labelcf[i])
print(confusionMatrix(unlist(predictions[i]),banktest$y)$table)
print(confusionMatrix(unlist(predictions[i]),banktest$y)$byClass[c(3,11)])
}
lf<-confusionMatrix(predlogex,banktest$y)$byClass[3]
rf<-confusionMatrix(predrfex,banktest$y)$byClass[3]
svml<-confusionMatrix(predrad,banktest$y)$byClass[3]
dt<-confusionMatrix(predtreeex,banktest$y)$byClass[3]
#lf<-confusionMatrix(predlogfull,banktest$y)$byClass[3]
#rf<-confusionMatrix(predrf,banktest$y)$byClass[3]
#svml<-confusionMatrix(predrad,banktest$y)$byClass[3]
#dt<-confusionMatrix(predtree,banktest$y)$byClass[3]
plot(x=1,y=1,ylab="Cost-To-Revenue Ratio",xlab="Call Success Rate",xlim=c(0.035,1),ylim=c(0.035,1))
abline(0,1,lwd = 2, lty = 3)
lines(c(lf,lf),c(lf,0),lwd = 2,col="darkgreen")
lines(c(rf,rf),c(rf,0),lwd = 2,col="blue")
lines(c(svml,svml),c(svml,0),lwd = 2,col="red")
lines(c(dt,dt),c(dt,0),lwd = 2,col="green")
legend("bottomright",legend=c("Logistic Regression","Random Forest","Linear SVM","Decision Tree","Break-even Profitability"),lty=c(1,1,1,1,3),lwd = 2,col = c("darkgreen", "blue","red","green","black"))
rpart.plot(banktree$finalModel)
rpart.plot(banktreeex$finalModel)
table(bank$default)
data.frame(predtree,banktest$nr.employed)
table(bank$pdays)
table(bank$nr.employed)
data.frame(predrad,banktest$nr.employed)
varImp(predrad)
varImp(bankrad)
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
str(bank)
