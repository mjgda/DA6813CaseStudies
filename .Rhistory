#scale data
params<-preProcess(bank,method=c("scale"))
scaledbank<-predict(params,bank)
head(scaledbank)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
setwd("~/GitHub/DA6813CaseStudies")
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale data
params<-preProcess(bank,method=c("scale"))
scaledbank<-predict(params,bank)
head(scaledbank)
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
summary(stepped)
attach(bank)
plot(Class,contact,ylab="Contact")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
setwd("~/GitHub/DA6813CaseStudies")
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale data
params<-preProcess(bank,method=c("scale"))
scaledbank<-predict(params,bank)
head(scaledbank)
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
summary(stepped)
attach(banktrain)
plot(Class,contact,ylab="Contact")
plot(Class,age,ylab="Age")
plot(Class,marital,ylab="Marital Status")
plot(job,Class,xlab="Job")
plot(Class,campaign,ylab="Campaign")
plot(month,Class,xlab="Month")
plot(poutcome,Class,xlab="Outcome")
plot(Class,cons.price.idx,ylab="Price Index")
plot(Class,cons.conf.idx,ylab="Consumer Confidence")
plot(Class,emp.var.rate,ylab="Employment")
detach()
set.seed(12345)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankLOG <- train(Class~pdays+previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate, data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
bankLOGfull <- train(Class~., data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
predlog<-predict(bankLOG,banktest)
predlogfull<-predict(bankLOGfull,banktest)
print("Selected Model")
confusionMatrix(predlog,banktest$y)
print("Full Model")
confusionMatrix(predlogfull,banktest$y)
set.seed(1)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankrad <- train(Class~pdays+poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "svmLinear",
metric="ROC",
trControl = TC,
tuneGrid = expand.grid(C = seq(0.5, 3, length = 10)))
set.seed(1)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankrad <- train(Class~pdays+poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "svmLinear",
metric="ROC",
trControl = TC)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
setwd("~/GitHub/DA6813CaseStudies")
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale data
params<-preProcess(bank,method=c("scale"))
scaledbank<-predict(params,bank)
head(scaledbank)
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
summary(stepped)
attach(banktrain)
plot(Class,contact,ylab="Contact")
plot(Class,age,ylab="Age")
plot(Class,marital,ylab="Marital Status")
plot(job,Class,xlab="Job")
plot(Class,campaign,ylab="Campaign")
plot(month,Class,xlab="Month")
plot(poutcome,Class,xlab="Outcome")
plot(Class,cons.price.idx,ylab="Price Index")
plot(Class,cons.conf.idx,ylab="Consumer Confidence")
plot(Class,emp.var.rate,ylab="Employment")
detach()
set.seed(12345)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankLOG <- train(Class~pdays+previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
bankLOGfull <- train(Class~., data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
predlog<-predict(bankLOG,banktest)
predlogfull<-predict(bankLOGfull,banktest)
print("Selected Model")
confusionMatrix(predlog,banktest$y)
print("Full Model")
confusionMatrix(predlogfull,banktest$y)
set.seed(1)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankrad <- train(Class~pdays+poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate, data=banktrain,
method = "svmLinear",
metric="ROC",
trControl = TC,
tuneGrid = expand.grid(C = seq(0.5, 3, length = 10)))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
setwd("~/GitHub/DA6813CaseStudies")
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale data
params<-preProcess(bank,method=c("scale","nzv"))
scaledbank<-predict(params,bank)
head(scaledbank)
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
summary(stepped)
attach(banktrain)
plot(Class,contact,ylab="Contact")
plot(Class,age,ylab="Age")
plot(Class,marital,ylab="Marital Status")
plot(job,Class,xlab="Job")
plot(Class,campaign,ylab="Campaign")
plot(month,Class,xlab="Month")
plot(poutcome,Class,xlab="Outcome")
plot(Class,cons.price.idx,ylab="Price Index")
plot(Class,cons.conf.idx,ylab="Consumer Confidence")
plot(Class,emp.var.rate,ylab="Employment")
detach()
set.seed(12345)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankLOG <- train(Class~pdays+previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
table(bank$loan)
set.seed(12345)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankLOG <- train(Class~previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
bankLOGfull <- train(Class~., data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
scaledbank
head(scaledbank)
params
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(MASS)
setwd("~/GitHub/DA6813CaseStudies")
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale data
params<-preProcess(bank,method=c("scale","nzv"))
scaledbank<-predict(params,bank)
head(scaledbank)
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
summary(stepped)
attach(banktrain)
plot(Class,contact,ylab="Contact")
plot(Class,age,ylab="Age")
plot(Class,marital,ylab="Marital Status")
plot(job,Class,xlab="Job")
plot(Class,campaign,ylab="Campaign")
plot(month,Class,xlab="Month")
plot(poutcome,Class,xlab="Outcome")
plot(Class,cons.price.idx,ylab="Price Index")
plot(Class,cons.conf.idx,ylab="Consumer Confidence")
plot(Class,emp.var.rate,ylab="Employment")
detach()
set.seed(12345)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
bankLOG <- train(Class~previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
bankLOGfull <- train(Class~., data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart.plot)
setwd("~/GitHub/DA6813CaseStudies")
#banktree<-rpart(Class∼., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart')
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class∼., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart')
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class∼., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',tuneGrid = expand.grid(C = seq(0.5, 3, length = 10)))
#banktree<-rpart(Class∼., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',tuneGrid = expand.grid(cp = seq(0.5, 3, length = 10)))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class∼., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',tuneGrid = expand.grid(cp = seq(0.5, 3, length = 10)))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class∼., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3)
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',tuneGrid = expand.grid(cp = seq(0, 1, length = 20)))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class∼., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',tuneGrid = expand.grid(cp = seq(0, 1, length = 20)))
rpart.plot(banktree$finalModel)
banktree<-rpart(Class~., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
#banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',tuneGrid = expand.grid(cp = seq(0, 1, length = 20)))
rpart.plot(banktree$finalModel)
banktree<-rpart(Class~., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
#banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',tuneGrid = expand.grid(cp = seq(0, 1, length = 20)))
#rpart.plot(banktree$finalModel)
library(rattle)
fancyRpartPlot(banktree)
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',tuneGrid = expand.grid(cp = seq(0, 1, length = 20),minsplit=seq(10,50,length=20)))
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',control = rpart.control(minsplit = 15, minbucket = 6))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class~., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#library(rattle)
#fancyRpartPlot(banktree)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',control = rpart.control(minsplit = 15, minbucket = 6))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class~., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#library(rattle)
#fancyRpartPlot(banktree)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, trControl=TC,method='rpart',control = rpart.control(cp=0.01,minsplit = 15, minbucket = 6))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class~., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#library(rattle)
#fancyRpartPlot(banktree)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, metric="ROC",trControl=TC,method='rpart',control = rpart.control(cp=0.01,minsplit = 15, minbucket = 6))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class~., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#library(rattle)
#fancyRpartPlot(banktree)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart.plot)
setwd("~/GitHub/DA6813CaseStudies")
bank<-read.csv('bank-additional.csv',sep=";",stringsAsFactors = T)
sum(is.na(bank))
#duration in column 11
bank<-bank[-11]
#replace month abbreviations with numbers
monthord<-as.character(bank$month)
mn<-c('jan','feb','mar','apr','may','jun','jul',
'aug','sep','oct','nov','dec')
md<-c(1,2,3,4,5,6,7,8,9,10,11,12)
monthord[monthord %in% mn] <- md[match(monthord, mn)]
bank$month<-as.factor(monthord)
#replace day of week abbreviations with numbers
weekord<-as.character(bank$day_of_week)
mn<-c('mon','tue','wed','thu','fri','sat','sun')
md<-c(1,2,3,4,5,6,7)
weekord[weekord %in% mn] <- md[match(weekord, mn)]
bank$day_of_week<-as.factor(weekord)
#reverse levels so "yes" is returned as the positive class to the caret model
bank$y <- factor(bank$y, levels=rev(levels(bank$y)))
#scale data
params<-preProcess(bank,method=c("scale","nzv"))
scaledbank<-predict(params,bank)
head(scaledbank)
train<-sample(nrow(scaledbank),0.7*nrow(scaledbank))
banktrain<-scaledbank[train,]
banktest<-scaledbank[-train,]
banktrain<-upSample(x=banktrain[,-ncol(banktrain)],y=banktrain$y)
fullmodel<-glm(Class~.,banktrain,family=binomial)
stepped<-stepAIC(fullmodel, direction = "both",trace = FALSE)
summary(stepped)
attach(banktrain)
plot(Class,contact,ylab="Contact")
plot(Class,age,ylab="Age")
plot(Class,marital,ylab="Marital Status")
plot(job,Class,xlab="Job")
plot(Class,campaign,ylab="Campaign")
plot(month,Class,xlab="Month")
plot(poutcome,Class,xlab="Outcome")
plot(Class,cons.price.idx,ylab="Price Index")
plot(Class,cons.conf.idx,ylab="Consumer Confidence")
plot(Class,emp.var.rate,ylab="Employment")
detach()
set.seed(12345)
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3)
bankLOG <- train(Class~previous+contact+campaign+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
bankLOGfull <- train(Class~., data=banktrain,
method = "glmnet",
metric="Spec",
trControl = TC)
predlog<-predict(bankLOG,banktest)
predlogfull<-predict(bankLOGfull,banktest)
print("Selected Model")
confusionMatrix(predlog,banktest$y)
print("Full Model")
confusionMatrix(predlogfull,banktest$y)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, metric="ROC",trControl=TC,method='rpart',control = rpart.control(cp=0.01,minsplit = 15, minbucket = 6))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class~., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#library(rattle)
#fancyRpartPlot(banktree)
predtree<-predict(banktree,banktest)
confusionMatrix(predtree,banktest$y)
set.seed(1)
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3)
bankrad <- train(Class~poutcome+job+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate, data=banktrain,
method = "svmLinear",
metric="ROC",
trControl = TC,
tuneGrid = expand.grid(C = seq(0.5, 3, length = 10)))
set.seed(1)
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3,classProbs=TRUE,summaryFunction = twoClassSummary))
set.seed(1)
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3,classProbs=TRUE,summaryFunction = twoClassSummary)
bankrad <- train(Class~poutcome+job+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate, data=banktrain,
method = "svmLinear",
metric="ROC",
trControl = TC,
tuneGrid = expand.grid(C = seq(0.5, 3, length = 10)))
#)
bankrad
predrad<-predict(bankrad,banktest)
confusionMatrix(predrad,banktest$y)
TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
#TC <- trainControl(method="repeatedcv", number=10, repeats=3)
banktree=train(Class~.,data=banktrain, metric="ROC",trControl=TC,method='rpart',control = rpart.control(cp=0.06,minsplit = 15, minbucket = 6))
rpart.plot(banktree$finalModel)
#banktree<-rpart(Class~., data=banktrain, method="class", control=rpart.control(minsplit=15, cp=0.01))
#library(rattle)
#fancyRpartPlot(banktree)
predtree<-predict(banktree,banktest)
confusionMatrix(predtree,banktest$y)
set.seed(12345)
#TC <- trainControl(method = "boot", number=50,classProbs=TRUE,summaryFunction = twoClassSummary)
TC <- trainControl(method="repeatedcv", number=10, repeats=3)
bankrf <- train(Class~poutcome+job+loan+contact+campaign+month+cons.price.idx+cons.conf.idx+emp.var.rate+education+day_of_week, data=banktrain,
method = "rf",
metric="Spec",
trControl = TC)
bankrf
predrf<-predict(bankrf,banktest)
confusionMatrix(predrf,banktest$y)
names(bankrad)
bankrad$pred
bankrad$finalModel
bankrad$coefnames
bankrad$terms
