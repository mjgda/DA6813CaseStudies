#print(testmse)
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,round(trainmse,3))
lines(trainstock$percent_change_next_weeks_price,col="red")
model<-selectlm
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-mean((trainedpred-trainstock$percent_change_next_weeks_price)^2)
testmse<-mean((prediction-target$percent_change_next_weeks_price)^2)
#print(i)
#print(trainmse)
#print(testmse)
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"MSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"MSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
model<-fullsvm
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-mean((trainedpred-trainstock$percent_change_next_weeks_price)^2)
testmse<-mean((prediction-target$percent_change_next_weeks_price)^2)
#print(i)
#print(trainmse)
#print(testmse)
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"MSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"MSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
model<-originalsvm
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-mean((trainedpred-trainstock$percent_change_next_weeks_price)^2)
testmse<-mean((prediction-target$percent_change_next_weeks_price)^2)
#print(i)
#print(trainmse)
#print(testmse)
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"MSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"MSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
knitr::opts_chunk$set(echo = TRUE)
#Task: Build models to predict stock prices and evaluate risks of stocks.
#Target per percent_change_next_weeks_price
#Models to try: Linear Regression, Decision Trees, SVM
#All use-able variables:
#percent_change_price+percent_change_volume_over_last_wk+time+open+days_to_next_dividend+percent_return_next_dividend+close+high+low+stock+previous_weeks_volume+volume
#Variables used in original study:
#percent_change_price+percent_change_volume_over_last_wk+days_to_next_dividend+percent_return_next_dividend
library(Boruta)
library(caret)
library(imputeTS)
library(e1071)
library(rpart)
setwd("~/GitHub/DA6813CaseStudies/Case3")
#setwd("~/MSDA/Fall 2021/GitHub")
#setwd("~/MSDA/Fall 2021/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case2")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case3")
DOWdata<-read.table('dow_jones_index.data',sep=",",header=T)
for(i in c(4:7,12:13)){
DOWdata[[i]]<-as.numeric(gsub('\\$','',DOWdata[[i]]))
}
DOWdata$date<-as.Date(DOWdata$date,format ="%m/%d/%Y")
DOWdata$time<-as.numeric(DOWdata$date)
q1<-unique(DOWdata$date[DOWdata$quarter==1])
q2<-unique(DOWdata$date[DOWdata$quarter==2])
for(j in list(q1,q2)){
for(i in 1:length(j)){
DOWdata$time[DOWdata$date==j[i]]<-i
}
}
#params<-preProcess(DOWdata[c(-1,-17)],method=c("scale","nzv"))
#DOWdata[c(-1,-17)]<-predict(params,DOWdata[c(-1,-17)])
train<-DOWdata[DOWdata$quarter==1,]
test<-DOWdata[DOWdata$quarter==2,]
train<-na_ma(train)
test<-na_ma(test)
str(train)
#writing formulas
targety<-"percent_change_next_weeks_price"
fvar<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","stock","previous_weeks_volume","volume")
ovar<-c("percent_change_price","percent_change_volume_over_last_wk",
"days_to_next_dividend","percent_return_next_dividend")
svar<-c("time","time:percent_return_next_dividend","close","stock")
svarsvm<-c("time","time:percent_return_next_dividend","close")
fvarsvm<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","previous_weeks_volume","volume")
selectformula<-as.formula(paste(targety,paste(svar,collapse="+"),sep="~"))
fullformula<-as.formula(paste(targety,paste(fvar,collapse="+"),sep="~"))
originalformula<-as.formula(paste(targety,paste(ovar,collapse="+"),sep="~"))
selectformulasvm<-as.formula(paste(targety,paste(svarsvm,collapse="+"),sep="~"))
fullformulasvm<-as.formula(paste(targety,paste(fvarsvm,collapse="+"),sep="~"))
##
selectlm<-glm(formula=selectformula,family="gaussian",data=train)
fulllm<-glm(formula=fullformula,family="gaussian",data=train)
originallm<-glm(formula=originalformula,family="gaussian",data=train)
selectsvm<-svm(formula=selectformulasvm,data=train)
fullsvm<-svm(formula=fullformulasvm,data=train)
originalsvm<-svm(formula=originalformula,data=train)
summary(fullsvm)
#summary(fulllm)
#summary(originallm)
prediction<-predict(fullsvm,test)
head(prediction)
model<-fullsvm
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-mean((trainedpred-trainstock$percent_change_next_weeks_price)^2)
testmse<-mean((prediction-target$percent_change_next_weeks_price)^2)
#print(i)
#print(trainmse)
#print(testmse)
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"MSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"MSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
# Load the Dataset
#Stock_Det = read_csv("dow_jones_index.data")
Stock_Det = DOWdata
str(Stock_Det)
#glimpse(Stock_Det)
# Convert the price into Numberic value
Stock_Det$open=as.numeric(gsub("\\$","",Stock_Det$open))
Stock_Det$high=as.numeric(gsub("\\$","",Stock_Det$high))
Stock_Det$low=as.numeric(gsub("\\$","",Stock_Det$low))
Stock_Det$close=as.numeric(gsub("\\$","",Stock_Det$close))
Stock_Det$next_weeks_open=as.numeric(gsub("\\$","",Stock_Det$next_weeks_open))
Stock_Det$next_weeks_close=as.numeric(gsub("\\$","",Stock_Det$next_weeks_close))
## Convert the date into Date Format
Stock_Det$date=mdy(Stock_Det$date)
knitr::opts_chunk$set(echo = TRUE)
#Task: Build models to predict stock prices and evaluate risks of stocks.
#Target per percent_change_next_weeks_price
#Models to try: Linear Regression, Decision Trees, SVM
#All use-able variables:
#percent_change_price+percent_change_volume_over_last_wk+time+open+days_to_next_dividend+percent_return_next_dividend+close+high+low+stock+previous_weeks_volume+volume
#Variables used in original study:
#percent_change_price+percent_change_volume_over_last_wk+days_to_next_dividend+percent_return_next_dividend
library(Boruta)
library(caret)
library(imputeTS)
library(e1071)
library(rpart)
setwd("~/GitHub/DA6813CaseStudies/Case3")
#setwd("~/MSDA/Fall 2021/GitHub")
#setwd("~/MSDA/Fall 2021/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case2")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case3")
DOWdata<-read.table('dow_jones_index.data',sep=",",header=T)
for(i in c(4:7,12:13)){
DOWdata[[i]]<-as.numeric(gsub('\\$','',DOWdata[[i]]))
}
DOWdata$date<-as.Date(DOWdata$date,format ="%m/%d/%Y")
DOWdata$time<-as.numeric(DOWdata$date)
q1<-unique(DOWdata$date[DOWdata$quarter==1])
q2<-unique(DOWdata$date[DOWdata$quarter==2])
for(j in list(q1,q2)){
for(i in 1:length(j)){
DOWdata$time[DOWdata$date==j[i]]<-i
}
}
#params<-preProcess(DOWdata[c(-1,-17)],method=c("scale","nzv"))
#DOWdata[c(-1,-17)]<-predict(params,DOWdata[c(-1,-17)])
train<-DOWdata[DOWdata$quarter==1,]
test<-DOWdata[DOWdata$quarter==2,]
train<-na_ma(train)
test<-na_ma(test)
str(train)
# Load the Dataset
#Stock_Det = read_csv("dow_jones_index.data")
Stock_Det = DOWdata
str(Stock_Det)
#glimpse(Stock_Det)
# Convert the price into Numberic value
Stock_Det$open=as.numeric(gsub("\\$","",Stock_Det$open))
Stock_Det$high=as.numeric(gsub("\\$","",Stock_Det$high))
Stock_Det$low=as.numeric(gsub("\\$","",Stock_Det$low))
Stock_Det$close=as.numeric(gsub("\\$","",Stock_Det$close))
Stock_Det$next_weeks_open=as.numeric(gsub("\\$","",Stock_Det$next_weeks_open))
Stock_Det$next_weeks_close=as.numeric(gsub("\\$","",Stock_Det$next_weeks_close))
## Convert the date into Date Format
Stock_Det$date=mdy(Stock_Det$date)
ggplot(data=DOWdata, aes(x=date, y=volume,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=percent_change_price,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=percent_change_volume_over_last_wk,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=percent_return_next_dividend,color=stock)) +
geom_point() +
xlab("")
## Based on the time series plot on various stocks, it can be inferred that the data follows the stationary pattern over the variables volume,percent_change_price,percent_change_volume_over_last_wk,percent_change_next_weeks_price and percent_return_next_dividend
# Load the Dataset
#Stock_Det = read_csv("dow_jones_index.data")
#Stock_Det = DOWdata
#str(Stock_Det)
#glimpse(Stock_Det)
# Convert the price into Numberic value
#Stock_Det$open=as.numeric(gsub("\\$","",Stock_Det$open))
#Stock_Det$high=as.numeric(gsub("\\$","",Stock_Det$high))
#Stock_Det$low=as.numeric(gsub("\\$","",Stock_Det$low))
#Stock_Det$close=as.numeric(gsub("\\$","",Stock_Det$close))
#Stock_Det$next_weeks_open=as.numeric(gsub("\\$","",Stock_Det$next_weeks_open))
#Stock_Det$next_weeks_close=as.numeric(gsub("\\$","",Stock_Det$next_weeks_close))
## Convert the date into Date Format
#Stock_Det$date=mdy(Stock_Det$date)
#summary(Stock_Det)
# Check the missing Values and the missing Column
#sum(is.na(Stock_Det))
#names(which(sapply(Stock_Det, anyNA)))
#Stock_symbol=unique(Stock_Det[c("stock")])
#stoc_det_num=subset(Stock_Det,select = -c(stock))
# There Are totally 60 missing values in the data set . The columns which has the missing values are "percent_change_volume_over_last_wk" "previous_weeks_volume" .Each Column has 30 Missing values based on the number of unique stocks. The missing values are due to the fact that the previous week data (December 2010) is not available. The missing values are getting imputed using the Weighted moving average algorithm, which adds more weight to the previous data for imputation
#imputed_data=na_ma(Stock_Det)
## Normalize the data set
# The Data Available in the dataset are not not in the same scale. In-order to have an effective analysis We are normalizing the data to be in the same scale.
#params=preProcess(imputed_data,method=c("scale","center","nzv"))
#Scale_stock_det= predict(params,Stock_Det)
# Split the data into Train and test
# Training dataset will contain the stock records for the month January to March. Whereas the testing dataset contains the stock records for the month April to June.
#train_data = subset(Scale_stock_det,(month(date)>=1 & month(date)<=3))
#test_data= subset(Scale_stock_det,(month(date)>=4 & month(date)<=6))
ggplot(data=Scale_stock_det_cons, aes(x=date, y=percent_change_next_weeks_price,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=percent_change_next_weeks_price,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=volume,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=percent_return_next_dividend,color=stock)) +
geom_point() +
xlab("")
## Based on the time series plot on various stocks, it can be inferred that the data follows the stationary pattern over the variables volume,percent_change_price,percent_change_volume_over_last_wk,percent_change_next_weeks_price and percent_return_next_dividend
# Execute the linear regression and Check whether any autocorrealtion exists between the time period
control_var=trainControl(method="cv", number=10)
set.seed(100)
stock_lm <- train(percent_change_next_weeks_price ~ date+stock+volume+percent_change_price+percent_change_volume_over_last_wk+percent_return_next_dividend,
data = Scale_stock_det_cons, trControl = control_var, method = "lm")
# Execute the linear regression and Check whether any autocorrealtion exists between the time period
control_var=trainControl(method="cv", number=10)
set.seed(100)
stock_lm <- train(percent_change_next_weeks_price ~ date+stock+volume+percent_change_price+percent_change_volume_over_last_wk+percent_return_next_dividend,
data = train, trControl = control_var, method = "lm")
stock_lm$results
stock_lm_res=resid(stock_lm)
plot(x=Scale_stock_det_cons$date,y=stock_lm_res, ylab="Residuals", xlab="Date")
plot(x=train$date,y=stock_lm_res, ylab="Residuals", xlab="Date")
abline(0,0)
y=train$percent_change_next_weeks_price
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = "Lag plot for Percentage of price change for next week")
y=train$volume
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = "Lag plot for volumes of stock traded")
y=train$percent_change_price
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = "Lag plot for Percentage of Price changes")
y=train$percent_change_volume_over_last_wk
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,
main = "Percent change in volume of stocks traded compared to the previous week")
y=train$percent_return_next_dividend
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = "Percentage of return in the next dividend")
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = "Lag plot for Percentage of Price changes")
lag.plot(train$percent_change_price,5)
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
model<-selectsvm
knitr::opts_chunk$set(echo = TRUE)
#Task: Build models to predict stock prices and evaluate risks of stocks.
#Target per percent_change_next_weeks_price
#Models to try: Linear Regression, Decision Trees, SVM
#All use-able variables:
#percent_change_price+percent_change_volume_over_last_wk+time+open+days_to_next_dividend+percent_return_next_dividend+close+high+low+stock+previous_weeks_volume+volume
#Variables used in original study:
#percent_change_price+percent_change_volume_over_last_wk+days_to_next_dividend+percent_return_next_dividend
library(Boruta)
library(caret)
library(imputeTS)
library(e1071)
library(rpart)
setwd("~/GitHub/DA6813CaseStudies/Case3")
#setwd("~/MSDA/Fall 2021/GitHub")
#setwd("~/MSDA/Fall 2021/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case2")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case3")
DOWdata<-read.table('dow_jones_index.data',sep=",",header=T)
for(i in c(4:7,12:13)){
DOWdata[[i]]<-as.numeric(gsub('\\$','',DOWdata[[i]]))
}
DOWdata$date<-as.Date(DOWdata$date,format ="%m/%d/%Y")
DOWdata$time<-as.numeric(DOWdata$date)
q1<-unique(DOWdata$date[DOWdata$quarter==1])
q2<-unique(DOWdata$date[DOWdata$quarter==2])
for(j in list(q1,q2)){
for(i in 1:length(j)){
DOWdata$time[DOWdata$date==j[i]]<-i
}
}
#params<-preProcess(DOWdata[c(-1,-17)],method=c("scale","nzv"))
#DOWdata[c(-1,-17)]<-predict(params,DOWdata[c(-1,-17)])
train<-DOWdata[DOWdata$quarter==1,]
test<-DOWdata[DOWdata$quarter==2,]
train<-na_ma(train)
test<-na_ma(test)
str(train)
#writing formulas
targety<-"percent_change_next_weeks_price"
fvar<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","stock","previous_weeks_volume","volume")
ovar<-c("percent_change_price","percent_change_volume_over_last_wk",
"days_to_next_dividend","percent_return_next_dividend")
svar<-c("time","time:percent_return_next_dividend","close","stock")
svarsvm<-c("time","time:percent_return_next_dividend","close")
fvarsvm<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","previous_weeks_volume","volume")
selectformula<-as.formula(paste(targety,paste(svar,collapse="+"),sep="~"))
fullformula<-as.formula(paste(targety,paste(fvar,collapse="+"),sep="~"))
originalformula<-as.formula(paste(targety,paste(ovar,collapse="+"),sep="~"))
selectformulasvm<-as.formula(paste(targety,paste(svarsvm,collapse="+"),sep="~"))
fullformulasvm<-as.formula(paste(targety,paste(fvarsvm,collapse="+"),sep="~"))
##
selectlm<-glm(formula=selectformula,family="gaussian",data=train)
fulllm<-glm(formula=fullformula,family="gaussian",data=train)
originallm<-glm(formula=originalformula,family="gaussian",data=train)
selectsvm<-svm(formula=selectformulasvm,data=train)
fullsvm<-svm(formula=fullformulasvm,data=train)
originalsvm<-svm(formula=originalformula,data=train)
summary(fullsvm)
#summary(fulllm)
#summary(originallm)
prediction<-predict(fullsvm,test)
head(prediction)
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
model<-selectsvm
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-mean((trainedpred-trainstock$percent_change_next_weeks_price)^2)
testmse<-mean((prediction-target$percent_change_next_weeks_price)^2)
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"MSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"MSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
##
selectlm<-glm(formula=selectformula,family="gaussian",data=train)
fulllm<-glm(formula=fullformula,family="gaussian",data=train)
originallm<-glm(formula=originalformula,family="gaussian",data=train)
selectsvm<-svm(formula=selectformulasvm,data=train)
fullsvm<-svm(formula=fullformulasvm,data=train)
originalsvm<-svm(formula=originalformula,data=train)
selecttree<-rpart(formula=selectformulasvm,method = "anova",data=train)
##
selectlm<-glm(formula=selectformula,family="gaussian",data=train)
fulllm<-glm(formula=fullformula,family="gaussian",data=train)
originallm<-glm(formula=originalformula,family="gaussian",data=train)
selectsvm<-svm(formula=selectformulasvm,data=train)
fullsvm<-svm(formula=fullformulasvm,data=train)
originalsvm<-svm(formula=originalformula,data=train)
#selecttree<-rpart(formula=selectformulasvm,method = "anova",data=train)
fulltree<-rpart(formula=fullformulasvm,method = "anova",data=train)
originaltree<-rpart(formula=originalformula,method = "anova",data=train)
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
model<-originaltree
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-mean((trainedpred-trainstock$percent_change_next_weeks_price)^2)
testmse<-mean((prediction-target$percent_change_next_weeks_price)^2)
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"MSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"MSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
library(rattle)
fancyRpartPlot(fulltree)
knitr::opts_chunk$set(echo = TRUE)
#Task: Build models to predict stock prices and evaluate risks of stocks.
#Target per percent_change_next_weeks_price
#Models to try: Linear Regression, Decision Trees, SVM
#All use-able variables:
#percent_change_price+percent_change_volume_over_last_wk+time+open+days_to_next_dividend+percent_return_next_dividend+close+high+low+stock+previous_weeks_volume+volume
#Variables used in original study:
#percent_change_price+percent_change_volume_over_last_wk+days_to_next_dividend+percent_return_next_dividend
library(Boruta)
library(caret)
library(imputeTS)
library(e1071)
library(rpart)
setwd("~/GitHub/DA6813CaseStudies/Case3")
#setwd("~/MSDA/Fall 2021/GitHub")
#setwd("~/MSDA/Fall 2021/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case2")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case3")
DOWdata<-read.table('dow_jones_index.data',sep=",",header=T)
for(i in c(4:7,12:13)){
DOWdata[[i]]<-as.numeric(gsub('\\$','',DOWdata[[i]]))
}
DOWdata$date<-as.Date(DOWdata$date,format ="%m/%d/%Y")
DOWdata$time<-as.numeric(DOWdata$date)
q1<-unique(DOWdata$date[DOWdata$quarter==1])
q2<-unique(DOWdata$date[DOWdata$quarter==2])
for(j in list(q1,q2)){
for(i in 1:length(j)){
DOWdata$time[DOWdata$date==j[i]]<-i
}
}
params<-preProcess(DOWdata[c(-1,-17)],method=c("scale","nzv"))
DOWdata[c(-1,-17)]<-predict(params,DOWdata[c(-1,-17)])
train<-DOWdata[DOWdata$quarter==1,]
test<-DOWdata[DOWdata$quarter==2,]
train<-na_ma(train)
test<-na_ma(test)
str(train)
#writing formulas
targety<-"percent_change_next_weeks_price"
fvar<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","stock","previous_weeks_volume","volume")
ovar<-c("percent_change_price","percent_change_volume_over_last_wk",
"days_to_next_dividend","percent_return_next_dividend")
svar<-c("time","time:percent_return_next_dividend","close","stock")
svarsvm<-c("time","time:percent_return_next_dividend","close")
fvarsvm<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","previous_weeks_volume","volume")
selectformula<-as.formula(paste(targety,paste(svar,collapse="+"),sep="~"))
fullformula<-as.formula(paste(targety,paste(fvar,collapse="+"),sep="~"))
originalformula<-as.formula(paste(targety,paste(ovar,collapse="+"),sep="~"))
selectformulasvm<-as.formula(paste(targety,paste(svarsvm,collapse="+"),sep="~"))
fullformulasvm<-as.formula(paste(targety,paste(fvarsvm,collapse="+"),sep="~"))
##
selectlm<-glm(formula=selectformula,family="gaussian",data=train)
fulllm<-glm(formula=fullformula,family="gaussian",data=train)
originallm<-glm(formula=originalformula,family="gaussian",data=train)
selectsvm<-svm(formula=selectformulasvm,data=train)
fullsvm<-svm(formula=fullformulasvm,data=train)
originalsvm<-svm(formula=originalformula,data=train)
#selecttree<-rpart(formula=selectformulasvm,method = "anova",data=train) can't handle interaction
fulltree<-rpart(formula=fullformulasvm,method = "anova",data=train)
originaltree<-rpart(formula=originalformula,method = "anova",data=train)
prediction<-predict(fullsvm,test)
head(prediction)
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
model<-originaltree
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-mean((trainedpred-trainstock$percent_change_next_weeks_price)^2)
testmse<-mean((prediction-target$percent_change_next_weeks_price)^2)
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"MSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"MSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
