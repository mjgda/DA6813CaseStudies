prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-mean((trainedpred-trainstock$percent_change_next_weeks_price)^2)
testmse<-mean((prediction-target$percent_change_next_weeks_price)^2)
resultrow<-list(modellabels[m],i,trainmse,testmse,CAPM$Beta[CAPM$Stock==i])
print(modellabels[m])
print(length(resultrow))
#print(resultrow)
results<-rbind(results,resultrow)
}
}
colnames(results) <- c("Model","Stock","TrainMSE","TestMSE","Beta")
results$Difference<-(results$TestMSE-results$TrainMSE)
results
names(DOWdat)
names(DOWdata)
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
modellabels<-c("selectlm","fulllm","originallm","fulllaglm","siglaglm","selectsvm","fullsvm","originalsvm",
"fulllagsvm","siglagsvm","fulltree","originaltree","fulllagtree","siglagtree")
modellist<-list(selectlm,fulllm,originallm,fulllaglm,siglaglm,selectsvm,fullsvm,originalsvm,fulllagsvm,siglagsvm,
fulltree,originaltree,fulllagtree,siglagtree)
overallresults<-as.data.frame(matrix(ncol=3,nrow=0))
colnames(overallresults) <- c("Model","TrainMSE","TestMSE")
for(m in 1:length(modellist)){
model<-modellist[[m]]
target<-test
prediction<-predict(model,target)
trainstock<-train
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
resultrow<-list(modellabels[m],trainmse,testmse)
#print(resultrow)
overallresults<-rbind(overallresults,resultrow)
}
colnames(overallresults) <- c("Model","TrainRMSE","TestRMSE")
overallresults$Difference<-(overallresults$TestRMSE-overallresults$TrainRMSE)
overallresults[order(overallresults$TestRMSE),]
table((results$Model[results$TestMSE<5]))
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
modellabels<-c("selectlm","fulllm","originallm","fulllaglm","siglaglm","selectsvm","fullsvm","originalsvm",
"fulllagsvm","siglagsvm","fulltree","originaltree","fulllagtree","siglagtree")
modellist<-list(selectlm,fulllm,originallm,fulllaglm,siglaglm,selectsvm,fullsvm,originalsvm,fulllagsvm,siglagsvm,
fulltree,originaltree,fulllagtree,siglagtree)
results<-as.data.frame(matrix(ncol=5,nrow=0))
colnames(results) <- c("Model","Stock","TrainRMSE","TestRMSE","Beta")
for(m in 1:length(modellist)){
for(i in unique(test$stock)){
model<-modellist[[m]]
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
resultrow<-list(modellabels[m],i,trainmse,testmse,CAPM$Beta[CAPM$Stock==i])
print(modellabels[m])
print(length(resultrow))
#print(resultrow)
results<-rbind(results,resultrow)
}
}
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
modellabels<-c("selectlm","fulllm","originallm","fulllaglm","siglaglm","selectsvm","fullsvm","originalsvm",
"fulllagsvm","siglagsvm","fulltree","originaltree","fulllagtree","siglagtree")
modellist<-list(selectlm,fulllm,originallm,fulllaglm,siglaglm,selectsvm,fullsvm,originalsvm,fulllagsvm,siglagsvm,
fulltree,originaltree,fulllagtree,siglagtree)
results<-as.data.frame(matrix(ncol=5,nrow=0))
colnames(results) <- c("Model","Stock","TrainRMSE","TestRMSE","Beta")
for(m in 1:length(modellist)){
for(i in unique(test$stock)){
model<-modellist[[m]]
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
resultrow<-list(modellabels[m],i,trainmse,testmse,CAPM$Beta[CAPM$Stock==i])
results<-rbind(results,resultrow)
}
}
colnames(results) <- c("Model","Stock","TrainRMSE","TestRMSE","Beta")
results$Difference<-(results$TestRMSE-results$TrainRMSE)
table((results$Model[results$TestMSE<2.6]))
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
modellabels<-c("selectlm","fulllm","originallm","fulllaglm","siglaglm","selectsvm","fullsvm","originalsvm",
"fulllagsvm","siglagsvm","fulltree","originaltree","fulllagtree","siglagtree")
modellist<-list(selectlm,fulllm,originallm,fulllaglm,siglaglm,selectsvm,fullsvm,originalsvm,fulllagsvm,siglagsvm,
fulltree,originaltree,fulllagtree,siglagtree)
results<-as.data.frame(matrix(ncol=5,nrow=0))
colnames(results) <- c("Model","Stock","TrainRMSE","TestRMSE","Beta")
for(m in 1:length(modellist)){
for(i in unique(test$stock)){
model<-modellist[[m]]
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
resultrow<-list(modellabels[m],i,trainmse,testmse,CAPM$Beta[CAPM$Stock==i])
print(resultrow)
results<-rbind(results,resultrow)
}
}
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
modellabels<-c("selectlm","fulllm","originallm","fulllaglm","siglaglm","selectsvm","fullsvm","originalsvm",
"fulllagsvm","siglagsvm","fulltree","originaltree","fulllagtree","siglagtree")
modellist<-list(selectlm,fulllm,originallm,fulllaglm,siglaglm,selectsvm,fullsvm,originalsvm,fulllagsvm,siglagsvm,
fulltree,originaltree,fulllagtree,siglagtree)
results<-as.data.frame(matrix(ncol=5,nrow=0))
colnames(results) <- c("Model","Stock","TrainRMSE","TestRMSE","Beta")
for(m in 1:length(modellist)){
for(i in unique(test$stock)){
model<-modellist[[m]]
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
resultrow<-list(modellabels[m],i,trainmse,testmse,CAPM$Beta[CAPM$Stock==i])
results<-rbind(results,resultrow)
}
}
colnames(results) <- c("Model","Stock","TrainRMSE","TestRMSE","Beta")
results$Difference<-(results$TestRMSE-results$TrainRMSE)
results
table((results$Model[results$TestRMSE<2.6]))
table((results$Model[results$TestRMSE<2.5]))
table((results$Model[results$TestRMSE<2]))
table((results$Model[results$TestRMSE<.265]))
table((results$Model[results$TestRMSE<2.65]))
table((results$Model[results$TestRMSE<2.6]))
table((results$Model[results$TestRMSE<2.65]))
model<-selectsvm
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"RMSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"RMSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
boxplot(Returns,main="Expected Return", xlab="Stocks", ylab="Return",las=2)
result[order(results$TestRMSE),results$Model=="selectsvm"]
boxplot(Returns,main="Expected Return", xlab="Stocks", ylab="Return",las=2)
results[order(results$TestRMSE),results$Model=="selectsvm"]
boxplot(Returns,main="Expected Return", xlab="Stocks", ylab="Return",las=2)
results[results$Model=="selectsvm",]
boxplot(Returns,main="Expected Return", xlab="Stocks", ylab="Return",las=2)
results[results$Model=="selectsvm",][order(results$TestRMSE),]
boxplot(Returns,main="Expected Return", xlab="Stocks", ylab="Return",las=2)
rsvm<-results[results$Model=="selectsvm",]
rsvm[order(rsvm$TestRMSE),]
rsvm<-results[results$Model=="selectsvm",]
rsvm[order(rsvm$TestRMSE),]
knitr::opts_chunk$set(echo = TRUE)
#Task: Build models to predict stock prices and evaluate risks of stocks.
#Target per percent_change_next_weeks_price
#Models to try: Linear Regression, Decision Trees, SVM
#All use-able variables:
#percent_change_price+percent_change_volume_over_last_wk+time+open+days_to_next_dividend+percent_return_next_dividend+close+high+low+stock+previous_weeks_volume+volume
#Variables used in original study:
#percent_change_price+percent_change_volume_over_last_wk+days_to_next_dividend+percent_return_next_dividend
library(Boruta)
library(caret)
library(imputeTS)
library(e1071)
library(rpart)
library(tseries)
library(quantmod)
library(reshape2)
library(lubridate)
library(ggplot2)
library(tidyverse)
setwd("~/GitHub/DA6813CaseStudies/Case3")
#setwd("~/MSDA/Fall 2021/GitHub")
#setwd("~/MSDA/Fall 2021/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case2")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case3")
DOWdata<-read.table('dow_jones_index.data',sep=",",header=T)
for(i in c(4:7,12:13)){
DOWdata[[i]]<-as.numeric(gsub('\\$','',DOWdata[[i]]))
}
DOWdata$date<-as.Date(DOWdata$date,format ="%m/%d/%Y")
DOWdata<-na_ma(DOWdata)
DOWdata$time<-as.numeric(DOWdata$date)
q1<-unique(DOWdata$date[DOWdata$quarter==1])
q2<-unique(DOWdata$date[DOWdata$quarter==2])
for(j in list(q1,q2)){
for(i in 1:length(j)){
DOWdata$time[DOWdata$date==j[i]]<-i
}
}
# Open Lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(open_lag=dplyr::lag(open,n=1))
# High Lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(high_lag=dplyr::lag(high,n=1))
# Low Lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(low_lag=dplyr::lag(low,n=1))
# Close Lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(close_lag=dplyr::lag(close,n=1))
# percent_change_price
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(percent_change_price_lag=dplyr::lag(percent_change_price,n=1))
# Percent Change Volume Over Last Week Lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(percent_change_volume_over_last_wk_lag=dplyr::lag(percent_change_volume_over_last_wk,n=1))
# Percent Change Next Weeks Price Lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(percent_change_next_weeks_price_lag=dplyr::lag(percent_change_next_weeks_price,n=1))
# days_to_next_dividend_lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(days_to_next_dividend_lag=dplyr::lag(days_to_next_dividend,n=1))
# Percent Return Next Dividend Lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(percent_return_next_dividend_lag=dplyr::lag(percent_return_next_dividend,n=1))
# Next Weeks Close Lag
DOWdata=DOWdata %>%
group_by(stock)%>%
mutate(next_weeks_close_lag=dplyr::lag(next_weeks_close,n=1))
# Next Weeks Open Lag
DOWdata= DOWdata %>%
group_by(stock) %>%
mutate(next_weeks_open_lag = dplyr::lag(next_weeks_open, n =1))
# Volume Lag
DOWdata= DOWdata %>%
group_by(stock) %>%
mutate(volume_lag = dplyr::lag(volume, n =1))
# Previous Volume Lag
DOWdata= DOWdata %>%
group_by(stock) %>%
mutate(previous_weeks_volume_lag = dplyr::lag(previous_weeks_volume, n =1))
train<-DOWdata[DOWdata$quarter==1,]
test<-DOWdata[DOWdata$quarter==2,]
#index for CAPM
DOWIndex <- read.csv("DOW_2011Q1Q2.csv", header=TRUE, sep=",")
closedf<-as.data.frame.matrix(xtabs(~date+stock,DOWdata))
for(i in unique(DOWdata$stock)){
closedf[i]<-DOWdata$close[DOWdata$stock==i]
}
closedf$DOW<-DOWIndex[,5]
Returns<-na.omit(apply(closedf,2,Delt))
CAPM<-data.frame(matrix(ncol = 2, nrow = 0))
for(i in unique(DOWdata$stock)){
betta<-summary(lm(as.formula(paste(i,"DOW",sep="~")),as.data.frame(Returns)))
CAPM<-rbind(CAPM,c(i,betta$coefficients[2,1]))
}
colnames(CAPM) <- c("Stock","Beta")
#writing formulas
#static formulas
targety<-"percent_change_next_weeks_price"
fvar<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","stock","previous_weeks_volume","volume")
flagvar=c("percent_change_price_lag","percent_change_volume_over_last_wk_lag",
"open_lag","days_to_next_dividend_lag","percent_return_next_dividend_lag","close_lag",
"high_lag","low_lag","stock","previous_weeks_volume_lag","volume_lag")
flagvarsvm<-c("percent_change_price_lag","percent_change_volume_over_last_wk_lag",
"open_lag","days_to_next_dividend_lag","percent_return_next_dividend_lag","close_lag",
"high_lag","low_lag","previous_weeks_volume_lag","volume_lag")
ovar<-c("percent_change_price","percent_change_volume_over_last_wk",
"days_to_next_dividend","percent_return_next_dividend")
svar<-c("time","time:percent_return_next_dividend","close","stock")
slagvar<-c("percent_return_next_dividend_lag","low_lag","open_lag","close_lag","high_lag","volume_lag",
"previous_weeks_volume_lag","stock")
#svm needs to have stock excluded because it can't calculate without variation
fvarsvm<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","previous_weeks_volume","volume")
svarsvm<-c("time","time:percent_return_next_dividend","close")
slagvarsvm<-c("percent_return_next_dividend_lag","low_lag","open_lag","close_lag","high_lag","volume_lag",
"previous_weeks_volume_lag")
selectformula<-as.formula(paste(targety,paste(svar,collapse="+"),sep="~"))
fullformula<-as.formula(paste(targety,paste(fvar,collapse="+"),sep="~"))
originalformula<-as.formula(paste(targety,paste(ovar,collapse="+"),sep="~"))
selectformulasvm<-as.formula(paste(targety,paste(svarsvm,collapse="+"),sep="~"))
fullformulasvm<-as.formula(paste(targety,paste(fvarsvm,collapse="+"),sep="~"))
slagformulasvm<-as.formula(paste(targety,paste(slagvarsvm,collapse="+"),sep="~"))
fulllagformula<-as.formula(paste(targety,paste(flagvar,collapse="+"),sep="~"))
slagformula<-as.formula(paste(targety,paste(slagvar,collapse="+"),sep="~"))
fulllagformulasvm<-as.formula(paste(targety,paste(flagvarsvm,collapse="+"),sep="~"))
## Train models
selectlm<-glm(formula=selectformula,family="gaussian",data=train)
fulllm<-glm(formula=fullformula,family="gaussian",data=train)
originallm<-glm(formula=originalformula,family="gaussian",data=train)
fulllaglm<-glm(formula=fulllagformula,family="gaussian",data=train)
siglaglm<-glm(formula=slagformula,family="gaussian",data=train)
selectsvm<-svm(formula=selectformulasvm,data=train)
fullsvm<-svm(formula=fullformulasvm,data=train)
originalsvm<-svm(formula=originalformula,data=train)
fulllagsvm<-svm(formula=fulllagformulasvm,data=train)
siglagsvm<-svm(formula=slagformulasvm,data=train)
#selecttree<-rpart(formula=selectformulasvm,method = "anova",data=train) can't handle interaction
fulltree<-rpart(formula=fullformulasvm,method = "anova",data=train)
originaltree<-rpart(formula=originalformula,method = "anova",data=train)
fulllagtree<-rpart(formula=fulllagformulasvm,method = "anova",data=train)
siglagtree<-rpart(formula=slagformulasvm,method = "anova",data=train)
ggplot(data=DOWdata, aes(x=date, y=percent_change_next_weeks_price,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=volume,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=percent_change_price,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=percent_change_volume_over_last_wk,color=stock)) +
geom_point() +
xlab("")
ggplot(data=DOWdata, aes(x=date, y=percent_return_next_dividend,color=stock)) +
geom_point() +
xlab("")
lag.plot(train$percent_change_next_weeks_price,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = paste("Lag plot for Percentage of price change for next week:","Total"))
for(i in unique(test$stock)){
trainstock<-train[train$stock==i,]
y=train$percent_change_next_weeks_price[train$stock==i]
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = paste("Lag plot for Percentage of price change for next week:",i))
}
lag.plot(train$percent_change_price,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = "Lag plot for Percentage of Price changes:Total")
for(i in unique(test$stock)){
trainstock<-train[train$stock==i,]
y=train$percent_change_price[train$stock==i]
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = paste("Lag plot for Percentage of Price changes:",i))
}
for(i in unique(test$stock)){
trainstock<-train[train$stock==i,]
y=train$percent_change_volume_over_last_wk[train$stock==i]
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,
main = "Lag Plot for Percent change in volume of stocks traded compared to the previous week")
}
lag.plot(train$percent_return_next_dividend,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = paste("Percentage of return in the next dividend: Total"))
for(i in unique(test$stock)){
trainstock<-train[train$stock==i,]
y=train$percent_return_next_dividend[train$stock==i]
lag.plot(y,set.lags = 1:8,layout = c(2,4),labels=FALSE,main = paste("Lag Plot for Percentage of return in the next dividend:",i))
}
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
modellabels<-c("selectlm","fulllm","originallm","fulllaglm","siglaglm","selectsvm","fullsvm","originalsvm",
"fulllagsvm","siglagsvm","fulltree","originaltree","fulllagtree","siglagtree")
modellist<-list(selectlm,fulllm,originallm,fulllaglm,siglaglm,selectsvm,fullsvm,originalsvm,fulllagsvm,siglagsvm,
fulltree,originaltree,fulllagtree,siglagtree)
results<-as.data.frame(matrix(ncol=5,nrow=0))
colnames(results) <- c("Model","Stock","TrainRMSE","TestRMSE","Beta")
for(m in 1:length(modellist)){
for(i in unique(test$stock)){
model<-modellist[[m]]
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
resultrow<-list(modellabels[m],i,trainmse,testmse,CAPM$Beta[CAPM$Stock==i])
results<-rbind(results,resultrow)
}
}
colnames(results) <- c("Model","Stock","TrainRMSE","TestRMSE","Beta")
results$Difference<-(results$TestRMSE-results$TrainRMSE)
#Change model to compare
#Compares prediction on data that was used to train the model and then on new test data
#Due to some stocks having more outliers than average, the training data can yield even worse predictions
modellabels<-c("selectlm","fulllm","originallm","fulllaglm","siglaglm","selectsvm","fullsvm","originalsvm",
"fulllagsvm","siglagsvm","fulltree","originaltree","fulllagtree","siglagtree")
modellist<-list(selectlm,fulllm,originallm,fulllaglm,siglaglm,selectsvm,fullsvm,originalsvm,fulllagsvm,siglagsvm,
fulltree,originaltree,fulllagtree,siglagtree)
overallresults<-as.data.frame(matrix(ncol=3,nrow=0))
colnames(overallresults) <- c("Model","TrainMSE","TestMSE")
for(m in 1:length(modellist)){
model<-modellist[[m]]
target<-test
prediction<-predict(model,target)
trainstock<-train
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
resultrow<-list(modellabels[m],trainmse,testmse)
#print(resultrow)
overallresults<-rbind(overallresults,resultrow)
}
colnames(overallresults) <- c("Model","TrainRMSE","TestRMSE")
overallresults$Difference<-(overallresults$TestRMSE-overallresults$TrainRMSE)
overallresults[order(overallresults$TestRMSE),]
table((results$Model[results$TestRMSE<2.65]))
model<-selectsvm
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"RMSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"RMSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
}
boxplot(Returns,main="Expected Return", xlab="Stocks", ylab="Return",las=2)
rsvm<-results[results$Model=="selectsvm",]
rsvm[order(rsvm$TestRMSE),]
#writing formulas
#static formulas
targety<-"percent_change_next_weeks_price"
fvar<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","stock","previous_weeks_volume","volume")
flagvar=c("percent_change_price_lag","percent_change_volume_over_last_wk_lag",
"open_lag","days_to_next_dividend_lag","percent_return_next_dividend_lag","close_lag",
"high_lag","low_lag","stock","previous_weeks_volume_lag","volume_lag")
flagvarsvm<-c("percent_change_price_lag","percent_change_volume_over_last_wk_lag",
"open_lag","days_to_next_dividend_lag","percent_return_next_dividend_lag","close_lag",
"high_lag","low_lag","previous_weeks_volume_lag","volume_lag")
ovar<-c("percent_change_price","percent_change_volume_over_last_wk",
"days_to_next_dividend","percent_return_next_dividend")
svar<-c("time","time:percent_return_next_dividend","close","stock")
slagvar<-c("percent_return_next_dividend_lag","low_lag","open_lag","close_lag","high_lag","volume_lag",
"previous_weeks_volume_lag","stock")
#svm needs to have stock excluded because it can't calculate without variation
fvarsvm<-c("percent_change_price","percent_change_volume_over_last_wk","time",
"open","days_to_next_dividend","percent_return_next_dividend","close",
"high","low","previous_weeks_volume","volume")
svarsvm<-c("time","time:percent_return_next_dividend","close")
slagvarsvm<-c("percent_return_next_dividend_lag","low_lag","open_lag","close_lag","high_lag","volume_lag",
"previous_weeks_volume_lag")
selectformula<-as.formula(paste(targety,paste(svar,collapse="+"),sep="~"))
fullformula<-as.formula(paste(targety,paste(fvar,collapse="+"),sep="~"))
originalformula<-as.formula(paste(targety,paste(ovar,collapse="+"),sep="~"))
selectformulasvm<-as.formula(paste(targety,paste(svarsvm,collapse="+"),sep="~"))
fullformulasvm<-as.formula(paste(targety,paste(fvarsvm,collapse="+"),sep="~"))
slagformulasvm<-as.formula(paste(targety,paste(slagvarsvm,collapse="+"),sep="~"))
fulllagformula<-as.formula(paste(targety,paste(flagvar,collapse="+"),sep="~"))
slagformula<-as.formula(paste(targety,paste(slagvar,collapse="+"),sep="~"))
fulllagformulasvm<-as.formula(paste(targety,paste(flagvarsvm,collapse="+"),sep="~"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#Task: Build models to predict stock prices and evaluate risks of stocks.
#Target per percent_change_next_weeks_price
#Models to try: Linear Regression, Decision Trees, SVM
#All use-able variables:
#percent_change_price+percent_change_volume_over_last_wk+time+open+days_to_next_dividend+percent_return_next_dividend+close+high+low+stock+previous_weeks_volume+volume
#Variables used in original study:
#percent_change_price+percent_change_volume_over_last_wk+days_to_next_dividend+percent_return_next_dividend
library(Boruta)
library(caret)
library(imputeTS)
library(e1071)
library(rpart)
library(tseries)
library(quantmod)
library(reshape2)
library(lubridate)
library(ggplot2)
library(tidyverse)
setwd("~/GitHub/DA6813CaseStudies/Case3")
#setwd("~/MSDA/Fall 2021/GitHub")
#setwd("~/MSDA/Fall 2021/GitHub/DA6813CaseStudies")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case2")
#setwd("~/MSDA/Fall 2021/Data Analytics Applications/Case Study 1/DA6813CaseStudies/Case3")
model<-selectsvm
for(i in unique(test$stock)){
target<-test[test$stock==i,]
prediction<-predict(model,target)
trainstock<-train[train$stock==i,]
trainedpred<-predict(model,trainstock)
trainmse<-sqrt(mean((trainedpred-trainstock$percent_change_next_weeks_price)^2))
testmse<-sqrt(mean((prediction-target$percent_change_next_weeks_price)^2))
par(mfrow = c(1, 2))
plot(trainstock$time,trainstock$percent_change_next_weeks_price,main=paste("Train:",i,"RMSE:",round(trainmse,3)))
lines(trainstock$percent_change_next_weeks_price,col="red")
lines(trainedpred,col="blue")
plot(target$time,target$percent_change_next_weeks_price,main=paste("Test:",i,"RMSE:",round(testmse,3)))
lines(target$percent_change_next_weeks_price,col="red")
lines(prediction,col="blue")
if(i=="CVX"){break}
}
